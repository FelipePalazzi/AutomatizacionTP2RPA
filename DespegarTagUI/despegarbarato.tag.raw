//Para ejecutar este script se debe ingresar en la terminal el comando
//tagui despegarbarato.tag in/search.csv
//xpath de los elementos a utilizar
//Xpath del boton origen
py begin
import requests
import json
import os # This is a built-in Python library for interacting with the operating system
# Define la URL del webhook de Discord
webhook_url = "https://discord.com/api/webhooks/1420131501483491501/z-Hdgn5SIQ-4id5jkWvKb98r2-RxKyiOobjE0X7uc441p3MkwR4PPk13mJN2Gyu6-DPh"
# Define las rutas de los archivos de imagen
file_path = "C:\\Users\\Emma\\AutomatizacionTP2RPA\\DespegarTagUI\\out\\Cordoba-Salta\\TablaPrecios.png"
path_vuelo1 = "C:\\Users\\Emma\\AutomatizacionTP2RPA\\DespegarTagUI\\out\\Cordoba-Salta\\Vuelo1.png"
path_vuelo2 = "C:\\Users\\Emma\\AutomatizacionTP2RPA\\DespegarTagUI\\out\\Cordoba-Salta\\Vuelo2.png"
path_vuelo3 = "C:\\Users\\Emma\\AutomatizacionTP2RPA\\DespegarTagUI\\out\\Cordoba-Salta\\Vuelo3.png"
# Define el contenido JSON para el mensaje
payload_data = {
    "content": "Tabla de precios de vuelos Cordoba - Salta"
}
# Prepara el diccionario de archivos
# La clave (e.g., "file1") no es importante, pero debe ser única para cada archivo
files = {
    "file1": (os.path.basename(file_path), open(file_path, "rb"), "image/png"),
    "file2": (os.path.basename(path_vuelo1), open(path_vuelo1, "rb"), "image/png"),
    "file3": (os.path.basename(path_vuelo2), open(path_vuelo2, "rb"), "image/png"),
    "file4": (os.path.basename(path_vuelo3), open(path_vuelo3, "rb"), "image/png")
}
# Prepara el payload JSON
data = {
    "payload_json": (None, json.dumps(payload_data), "application/json")
}
try:
    # Envía la solicitud POST al webhook
    response = requests.post(webhook_url, data=data, files=files)
    # Revisa el estado de la respuesta
    if response.status_code == 204:
        print("Archivos subidos exitosamente a Discord.")
    else:
        print(f"Error al subir los archivos. Código de estado: {response.status_code}")
        print(response.text)
finally:
    # Es crucial cerrar todos los archivos abiertos para liberar los recursos
    for file_tuple in files.values():
        file_object = file_tuple[1]
        file_object.close()
py finish
buttonOrigin='/html/body/div[1]/div/div/div[1]/div[1]/div/div/div/div/div/div/form/div[2]/div/div[1]/div[1]/div[2]/div[1]'
//xpath del input de origen
searchInputOriginXPath = '//*[@id="home-tab-container"]/form/div[2]/div/div[1]/div[1]/div[2]/div[2]/div/input'
//xpath del primer resultado del dropdown de origenes
selectInputOptionOrigin = '/html/body/div[2]/div/div/div[1]/div[1]/div/div/div/div/div/div/form/div[2]/div/div[1]/div[1]/div[2]/div[3]/span/span/ul/li[1]/div[2]'
//xpath del input de destino
searchInputDestinyXPath = '//*[@id="home-tab-container"]/form/div[2]/div/div[1]/div[3]/div[2]/div[2]/div/input'
//xpath del primer resultado del dropdown de destinos
selectInputOptionDestiny = '//*[@id="autocomplete-open"]/span/span/ul/li[1]/div[2]'
//xpath del boton destino
buttonDestiny='//*[@id="home-tab-container"]/form/div[2]/div/div[1]/div[3]/div[2]/div[1]'
//xpath del boton buscar
searchBtnXPath ='//*[@id="home-tab-container"]/form/div[2]/div/div[4]/button'
//xpath del boton de solo ida
onlyWayButton='//*[@id="tt2"]'
//xpath del selector de fechas
selectDatesXPath = '//*[@id="home-tab-container"]/form/div[3]/div[2]/div'
echo Iteration: `iteration`
// Open Site
https://www.turismocity.com.ar/
wait 5
if iteration equals to 1
{
// Crear la carpeta out si no existe
//run cmd /c "mkdir out"
//keyboard [f11]
}
echo Searching for: `origin`
//Clicker el boton de solo ida
click `onlyWayButton`
//Clickear el boton de solo ida
click `selectDatesXPath`
// Clicker el campo origen
click `buttonOrigin`
// Escribir el origen
type `searchInputOriginXPath` as [clear]`origin`
//esperar que cargue el dropdown de origenes
wait 3
//Seleccionar el primer resultado del dropdown
click `selectInputOptionOrigin`
// Clicker el campo destino
click `buttonDestiny`
// Escribir el destino
type `searchInputDestinyXPath` as [clear]`destiny`
//esperar que cargue el dropdown de destinos
wait 5
//seleccionar el primer resultado del dropdown
click `selectInputOptionDestiny`
// Click al boton buscar
click `searchBtnXPath`
// Esperar que cargue la pagina de resultados
wait 3
//Aqui se procesan los resultados
// Create a timestamp for the screenshot filename
tablaPrecioMeses='//*[@id="priceBarChart"]'
//xpath de los 3 vuelos mas baratos
//xpath del vuelo mas barato
vuelo1='//*[@id="VuelosBaratos"]/div[2]/div[2]/div[4]/div/div[2]/div[2]/div/table/tbody/tr[1]'
//xpath del segundo vuelo mas barato
vuelo2='//*[@id="VuelosBaratos"]/div[2]/div[2]/div[4]/div/div[2]/div[2]/div/table/tbody/tr[2]]'
//xpath del tercer vuelo mas barato
vuelo3='//*[@id="VuelosBaratos"]/div[2]/div[2]/div[4]/div/div[2]/div[2]/div/table/tbody/tr[3]'
//Toma captura de la tabla de precios segun los meses y de los 3 vuelos mas baratos
snap `tablaPrecioMeses` to out/`output folder`/TablaPrecios.png
wait 2
snap `vuelo1` to out/`output folder`/Vuelo1.png
wait 2
snap `vuelo2` to out/`output folder`/Vuelo2-`timestamp`.png
wait 2
snap `vuelo3` to out/`output folder`/Vuelo3-`timestamp`.png
//Aqui se envia la tabla de precios a discord
if iteration equals to 1
{
py begin
import requests
import json
import os # This is a built-in Python library for interacting with the operating system
# Define la URL del webhook de Discord
webhook_url = "https://discord.com/api/webhooks/1420131501483491501/z-Hdgn5SIQ-4id5jkWvKb98r2-RxKyiOobjE0X7uc441p3MkwR4PPk13mJN2Gyu6-DPh"
# Define las rutas de los archivos de imagen
file_path = "C:\\Users\\Emma\\AutomatizacionTP2RPA\\DespegarTagUI\\out\\Cordoba-Salta\\TablaPrecios.png"
path_vuelo1 = "C:\\Users\\Emma\\AutomatizacionTP2RPA\\DespegarTagUI\\out\\Cordoba-Salta\\Vuelo1.png"
path_vuelo2 = "C:\\Users\\Emma\\AutomatizacionTP2RPA\\DespegarTagUI\\out\\Cordoba-Salta\\Vuelo2.png"
path_vuelo3 = "C:\\Users\\Emma\\AutomatizacionTP2RPA\\DespegarTagUI\\out\\Cordoba-Salta\\Vuelo3.png"
# Define el contenido JSON para el mensaje
payload_data = {
    "content": "Tabla de precios de vuelos Cordoba - Salta"
}
# Prepara el diccionario de archivos
# La clave (e.g., "file1") no es importante, pero debe ser única para cada archivo
files = {
    "file1": (os.path.basename(file_path), open(file_path, "rb"), "image/png"),
    "file2": (os.path.basename(path_vuelo1), open(path_vuelo1, "rb"), "image/png"),
    "file3": (os.path.basename(path_vuelo2), open(path_vuelo2, "rb"), "image/png"),
    "file4": (os.path.basename(path_vuelo3), open(path_vuelo3, "rb"), "image/png")
}
# Prepara el payload JSON
data = {
    "payload_json": (None, json.dumps(payload_data), "application/json")
}
try:
    # Envía la solicitud POST al webhook
    response = requests.post(webhook_url, data=data, files=files)
    # Revisa el estado de la respuesta
    if response.status_code == 204:
        print("Archivos subidos exitosamente a Discord.")
    else:
        print(f"Error al subir los archivos. Código de estado: {response.status_code}")
        print(response.text)
finally:
    # Es crucial cerrar todos los archivos abiertos para liberar los recursos
    for file_tuple in files.values():
        file_object = file_tuple[1]
        file_object.close()
py finish
}
if iteration equals to 2
{
py begin
import requests
import json
import os # This is a built-in Python library for interacting with the operating system
# Define la URL del webhook de Discord
webhook_url = "https://discord.com/api/webhooks/1420131501483491501/z-Hdgn5SIQ-4id5jkWvKb98r2-RxKyiOobjE0X7uc441p3MkwR4PPk13mJN2Gyu6-DPh"
# Define las rutas de los archivos de imagen
file_path = "C:\\Users\\Emma\\AutomatizacionTP2RPA\\DespegarTagUI\\out\\Ezeiza-Madrid\\TablaPrecios.png"
path_vuelo1 = "C:\\Users\\Emma\\AutomatizacionTP2RPA\\DespegarTagUI\\out\\Ezeiza-Madrid\\Vuelo1.png"
path_vuelo2 = "C:\\Users\\Emma\\AutomatizacionTP2RPA\\DespegarTagUI\\out\\Ezeiza-Madrid\\Vuelo2.png"
path_vuelo3 = "C:\\Users\\Emma\\AutomatizacionTP2RPA\\DespegarTagUI\\out\\Ezeiza-Madrid\\Vuelo3.png"
# Define el contenido JSON para el mensaje
payload_data = {
    "content": "Tabla de precios de vuelos Ezeiza - Madrid"
}
# Prepara el diccionario de archivos
# La clave (e.g., "file1") no es importante, pero debe ser única para cada archivo
files = {
    "file1": (os.path.basename(file_path), open(file_path, "rb"), "image/png"),
    "file2": (os.path.basename(path_vuelo1), open(path_vuelo1, "rb"), "image/png"),
    "file3": (os.path.basename(path_vuelo2), open(path_vuelo2, "rb"), "image/png"),
    "file4": (os.path.basename(path_vuelo3), open(path_vuelo3, "rb"), "image/png")
}
# Prepara el payload JSON
data = {
    "payload_json": (None, json.dumps(payload_data), "application/json")
}
try:
    # Envía la solicitud POST al webhook
    response = requests.post(webhook_url, data=data, files=files)
    # Revisa el estado de la respuesta
    if response.status_code == 204:
        print("Archivos subidos exitosamente a Discord.")
    else:
        print(f"Error al subir los archivos. Código de estado: {response.status_code}")
        print(response.text)
finally:
    # Es crucial cerrar todos los archivos abiertos para liberar los recursos
    for file_tuple in files.values():
        file_object = file_tuple[1]
        file_object.close()
py finish
}
